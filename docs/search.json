[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This blog was created for my Data Visualization class. My goal is to create interpretable visualizations that are easy for non statistics people to understand, as well as having hints to further interpretations if you look further. I wanted to combine this with things I am passionate about. This is why there is a blog post about stock prices, soccer, and basketball. I hope to expand on these subjects well also improving the visualizatoin skills and my analytical skills. I hope you enjoy!"
  },
  {
    "objectID": "posts/blog-post-3/blog-post-3.html",
    "href": "posts/blog-post-3/blog-post-3.html",
    "title": "Predicting if a NBA Team Will Make the Playoffs",
    "section": "",
    "text": "Intoduction\nFor this blog post, I wanted to take on more of a challenging idea which was to both create a prediction model and visualize that data. To to this, I also wanted to combine this with my passion for sports, particularly basketball. It felt only right to use NBA data to accomplish this. On Data World, I found a data set that had team stats from the 97-98 season all the way until the 21-22 season.\n\n# loading in necessary packages\nlibrary(tidyverse)\nlibrary(here)\nlibrary(kableExtra)\nlibrary(broom)\nlibrary(modelr)\nlibrary(knitr)\n\n\n# loading in data set\nteam_stats &lt;- read_csv(here('data/NBA_Team_Stats.csv'))\n\nHere is an example of what the data set looks like directly from the source.\n\n\nOriginal Data Set\n\nkable(head(team_stats))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo\nTeam\nG\nMin\nPts\nReb\nAst\nStl\nBlk\nTo\nPf\nDreb\nOreb\nFgm-a\nPct…15\n3gm-a\nPct…17\nFtm-a\nPct…19\nEff\nDeff\nYear\n\n\n\n\n1\nChicago\n103\n48.4\n96.0\n44.1\n23.1\n8.6\n4.3\n13.0\n21.1\n29.2\n14.9\n36.7-81.7\n0.449\n3.9-12.0\n0.323\n18.7-25.2\n0.741\n111.6\n17.5\n1997-1998\n\n\n2\nUtah\n102\n48.3\n98.6\n40.8\n24.7\n7.6\n4.8\n14.7\n24.3\n29.5\n11.3\n35.9-74.3\n0.483\n3.1-8.4\n0.368\n23.8-30.9\n0.768\n116.3\n17.5\n1997-1998\n\n\n3\nPhoenix\n86\n48.6\n99.3\n41.9\n25.6\n9.2\n5.3\n14.4\n21.7\n29.8\n12.1\n38.2-82.0\n0.466\n5.2-14.7\n0.355\n17.7-23.6\n0.747\n117.1\n13.6\n1997-1998\n\n\n4\nL.A.Lakers\n95\n48.3\n104.8\n42.9\n24.3\n8.7\n6.8\n14.7\n22.9\n29.7\n13.2\n38.0-79.1\n0.480\n6.1-17.3\n0.350\n22.8-33.7\n0.675\n120.8\n13.2\n1997-1998\n\n\n5\nSan Antonio\n91\n48.4\n92.5\n44.1\n21.9\n6.2\n6.9\n15.3\n21.2\n32.2\n11.9\n35.1-75.1\n0.468\n3.7-10.8\n0.344\n18.5-26.8\n0.688\n108.0\n13.1\n1997-1998\n\n\n6\nIndiana\n98\n48.4\n95.3\n38.6\n22.4\n7.8\n4.5\n13.6\n23.0\n28.2\n10.4\n35.0-74.9\n0.468\n5.0-12.9\n0.387\n20.3-26.6\n0.763\n109.0\n12.2\n1997-1998\n\n\n\n\n\nMy first step in this project is to clean and format this data in a way so that I can work with it how I want too. Below is a table showing what all the variable names mean.\n\n\nVariable Explanations\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\nNo\nEnd of Season Ranking (1 winning the Finals)\n\n\nTeam\nNBA Team Name\n\n\nG\nGames Played\n\n\nMin\nAverage Minutes Per Game\n\n\nPts\nAverage Points Per Game\n\n\nReb\nAverage Rebounds Per Game\n\n\nAst\nAverage Assists Per Game\n\n\nStl\nAverage Steals Per Game\n\n\nBlk\nAverage Blocks Per Game\n\n\nTo\nAverage Turnovers Per Game\n\n\nPf\nAverage Fouls Per Game\n\n\nDreb\nAverage Defensive Rebounds Per Game\n\n\nOreb\nAverage Offensive Rebounds Per Game\n\n\nFgm-a\nAverage Field Goals Made Per Game - Average Field Goals Attempted Per Game\n\n\n3gm-a\nAverage 3 Pointers Made Per Game - Average 3 Pointers Attempted Per Game\n\n\nFtm-a\nAverage Free Throws Made Per Game - Average Free Throws Attempted Per Game\n\n\nEff\nNBA Efficiency Recap\n\n\nDeff\nEfficiency Recap Difference\n\n\nYear\nYear of the NBA Season\n\n\n\nSide Note:\nNBA Efficiency Recap = ((Points + Rebounds + Assists + Steals + Blocks) - ((Field Goal Attempts - Field Goals Made) + (Free Throw Attempts - Free Throws Made) + Turnovers))\nEfficiency Recap Difference = Efficiency Recap - Opponent’s Efficiency Recap\n\n\nData Cleaning\n\nteam_stats_tidy &lt;-\n  team_stats |&gt;\n  mutate(Team = factor(Team))\nteam_stats_tidy &lt;-\n  team_stats_tidy |&gt;\n  mutate(Team = fct_recode(Team,\n                           Bulls = \"Chicago\",\n                           Jazz = \"Utah\",\n                           Suns = \"Phoenix\",\n                           Lakers = \"L.A.Lakers\",\n                           Spurs = \"San Antonio\",\n                           Pacers = \"Indiana\", \n                           Heat = \"Miami\",\n                           Thunder = \"Seattle\", \n                           Hawks = \"Atlanta\", \n                           Knicks = \"New York\",\n                           Cavaliers = \"Cleveland\",\n                           Hornets = \"Charlotte\",\n                           Trailblazers = \"Portland\", \n                           Timberwolves = \"Minnesota\",\n                           Wizards = \"Washington\",\n                           Pistons = \"Detroit\",\n                           Nets = \"New Jersey\",\n                           Bucks = \"Milwaukee\",\n                           Magic = \"Orlando\",\n                           Rockets = \"Houston\",\n                           Celtics = \"Boston\",\n                           `76ers` = \"Philadelphia\",\n                           Kings = \"Sacramento\",\n                           Mavericks = \"Dallas\",\n                           Grizzlies = \"Vancouver\",\n                           Clippers = \"L.A.Clippers\",\n                           Warriors = \"Golden State\",\n                           Raptors = \"Toronto\",\n                           Nuggets = \"Denver\",\n                           Pelicans = \"New Orleans\",\n                           Grizzlies = \"Memphis\",\n                           Nets = \"Brooklyn\",\n                           Thunder = \"Oklahoma City\"))\n\n\nteam_stats_tidy &lt;-\n  team_stats_tidy |&gt;\n  separate(`Fgm-a`,\n           sep = \"-\",\n           into = c(\"FGM\", \"FGA\")) |&gt;\n  separate(`3gm-a`,\n           sep = \"-\",\n           into = c(\"3PM\", \"3PA\")) |&gt;\n  separate(`Ftm-a`,\n           sep = \"-\",\n           into = c(\"FTM\", \"FTA\"))\n\n\nteam_stats_tidy &lt;-\n  team_stats_tidy |&gt;\n  rename(FG_pct = Pct...15,\n         `3P_pct` = Pct...17,\n         FT_pct = Pct...19) |&gt;\n  mutate(FGM = as.numeric(FGM),\n         FGA = as.numeric(FGA),\n         `3PM` = as.numeric(`3PM`),\n         `3PA` = as.numeric(`3PA`),\n         FTM = as.numeric(FTM),\n         FTA = as.numeric(FTA),\n         FG_pct = FG_pct * 100,\n         `3P_pct` = `3P_pct` * 100,\n         FT_pct = FT_pct * 100) |&gt;\n  mutate(Year = str_sub(Year,\n                        6),\n         Year = as.numeric(Year))\n\n\nteam_stats_tidy &lt;-\n  team_stats_tidy |&gt;\n  mutate(Conference = if_else(Team %in% c(\"Celtics\", \"Bucks\", \"Cavaliers\", \"Knicks\", \"76ers\", \"Magic\", \"Heat\", \"Pacers\", \"Bulls\", \"Hawks\", \"Nets\", \"Raptors\", \"Hornets\", \"Wizards\", \"Pistons\"), \"East\", \"West\"),\n         Playoffs = if_else(G &gt; 82, 1, 0))\n\n\n\nCleaned Data Set\nHere is an example of what the data now looks like\n\nkable(head(team_stats_tidy))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo\nTeam\nG\nMin\nPts\nReb\nAst\nStl\nBlk\nTo\nPf\nDreb\nOreb\nFGM\nFGA\nFG_pct\n3PM\n3PA\n3P_pct\nFTM\nFTA\nFT_pct\nEff\nDeff\nYear\nConference\nPlayoffs\n\n\n\n\n1\nBulls\n103\n48.4\n96.0\n44.1\n23.1\n8.6\n4.3\n13.0\n21.1\n29.2\n14.9\n36.7\n81.7\n44.9\n3.9\n12.0\n32.3\n18.7\n25.2\n74.1\n111.6\n17.5\n1998\nEast\n1\n\n\n2\nJazz\n102\n48.3\n98.6\n40.8\n24.7\n7.6\n4.8\n14.7\n24.3\n29.5\n11.3\n35.9\n74.3\n48.3\n3.1\n8.4\n36.8\n23.8\n30.9\n76.8\n116.3\n17.5\n1998\nWest\n1\n\n\n3\nSuns\n86\n48.6\n99.3\n41.9\n25.6\n9.2\n5.3\n14.4\n21.7\n29.8\n12.1\n38.2\n82.0\n46.6\n5.2\n14.7\n35.5\n17.7\n23.6\n74.7\n117.1\n13.6\n1998\nWest\n1\n\n\n4\nLakers\n95\n48.3\n104.8\n42.9\n24.3\n8.7\n6.8\n14.7\n22.9\n29.7\n13.2\n38.0\n79.1\n48.0\n6.1\n17.3\n35.0\n22.8\n33.7\n67.5\n120.8\n13.2\n1998\nWest\n1\n\n\n5\nSpurs\n91\n48.4\n92.5\n44.1\n21.9\n6.2\n6.9\n15.3\n21.2\n32.2\n11.9\n35.1\n75.1\n46.8\n3.7\n10.8\n34.4\n18.5\n26.8\n68.8\n108.0\n13.1\n1998\nWest\n1\n\n\n6\nPacers\n98\n48.4\n95.3\n38.6\n22.4\n7.8\n4.5\n13.6\n23.0\n28.2\n10.4\n35.0\n74.9\n46.8\n5.0\n12.9\n38.7\n20.3\n26.6\n76.3\n109.0\n12.2\n1998\nEast\n1\n\n\n\n\n\n\n\nBuilding A Model\nI decided to use some of the metrics in the data set to predict whether a team would make the playoffs or not. I made a response variables Playoffs by using a condition of if a team played more than 82 games or not in season.\nIn order to make sure that this model isn’t testing using data that knows the answer, we should get rid of both of the No and G variables. We also don’t care about what team it is so we should get rid of the team factor.\n\nteam_stats_tidy &lt;-\n  team_stats_tidy |&gt;\n  select(-(c(\"No\",\"G\", \"Team\")))\n\nI am only going to choose two predictors that were found to be relatively significant in a model using all the predictors. One is Conference which will allow me to compare between the East and the West and the other is Deff. As mentioned above, Deff factors in most other metrics vs their opponents. Shown below is my model with their coefficients and p values.\n\nplayoffs_mod &lt;- \n  glm(Playoffs ~ Deff + Conference,\n                    data = team_stats_tidy,\n                    family = 'binomial')\nkable(tidy(playoffs_mod))\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n0.2730904\n0.1446505\n1.887933\n0.059035\n\n\nDeff\n0.2662737\n0.0199059\n13.376644\n0.000000\n\n\nConferenceWest\n-0.7444720\n0.2188610\n-3.401575\n0.000670\n\n\n\n\n\n\ngrid &lt;-\n  team_stats_tidy |&gt;\n  data_grid(\n    Deff = seq_range(Deff, n = 60),\n    Conference = c(\"West\", \"East\")\n  )\n\n\naug &lt;-\n  augment(playoffs_mod,\n          newdata = grid,\n          se_fit = TRUE)\n\nNext I need to convert the .fitted values to predicted probabilities. Currently they are showing the predicted log odds.\n\naug &lt;-\n  aug |&gt;\n  mutate(.predprob = (exp(.fitted) / (1 + exp(.fitted))))\n\nFor my visualization I plan on using the geom_rug feature, so I need to make two separate data frames with teams that made the playoffs and teams that didn’t.\n\nstats_playoffs &lt;-\n  team_stats_tidy |&gt;\n  filter(Playoffs == 1)\n\nstats_nplayoffs &lt;-\n  team_stats_tidy |&gt;\n  filter(Playoffs == 0)\n\n\n\nFigure 1\n\n#|fig-width: 12\naug |&gt;\n  ggplot(aes(x = Deff,\n             y = .predprob)) +\n  geom_line(aes(colour = Conference),\n            linewidth = 1.2,\n            alpha = 0.7) +\n  scale_colour_viridis_d() +\n  geom_rug(data = stats_playoffs,\n           sides = 't',\n           alpha = 0.3,\n           aes(y = Playoffs)) +\n  geom_rug(data = stats_nplayoffs,\n           sides = 'b',\n           alpha = 0.3,\n           aes(y = Playoffs)) +\n  labs(x = \"Efficiency Recap Rating\",\n       y = \"Predicted Probability\",\n       colour = \"Conference\",\n       title = \"Probability of an NBA Team to Make the Playoffs\",\n       caption = \"(based on data from NBA via data world from 1998 - 2022)\") +\n  theme_minimal() +\n    theme(axis.title = element_text(size = 10,),\n        strip.text = element_text(size = 12),\n        plot.title = element_text(size = 16,\n                                  hjust = 0),\n        plot.subtitle = element_text(size = 6),\n        panel.spacing = unit(1, 'lines'),\n        strip.text.x = element_text(color = \"black\", \n                                    face = \"bold\"),\n        strip.background = element_rect(colour = \"black\",\n                                        fill = \"ivory\"),\n        panel.background = element_rect(fill = \"ivory\"),\n        plot.background = element_rect(fill = \"ivory\"),\n        plot.caption = element_text(hjust = 1.5)) +\n  scale_x_continuous(breaks=seq(-30, 40, 10))\n\n\n\n\n\n\nConclusion\nThis plot shows the differences in the probability of a team to make the playoffs dependent on their efficiency recap rating and their conference. Shown in this plot is that for a team in the Eastern Conference, they need a lower efficiency recap rating to have over a 0.5 probability of making the playoffs. One could imply from the 1997-98 season until the 2021-22 season, it is has been easier to make the playoffs in the Eastern Conference.\n\n\nConnections to Class\nIn this blog, I used many tactics from class. One being the data visualization aspects of faceting, and grouping. I put the geom_rug on as well and am visualizing my predicted probabilities for each observation. I also used our technique of creating a logistic regression model."
  },
  {
    "objectID": "posts/blog-post-2/blog-post-2.html",
    "href": "posts/blog-post-2/blog-post-2.html",
    "title": "Is There Bias Towards the Big 6?",
    "section": "",
    "text": "Introduction\nWhile scrolling through the Tidy Tuesday data, I found a data set of the Premier League Matches from 2021-2022. In this data, they included team goals and results for both the first half and the second half. They also included the referee, team shots, team shots on target, team fouls, team yellow cards, and team red cards. When thinking about the variables that this data had, I thought of the question is there bias towards the “big 6”. For those of you who don’t follow the Premier League, the big 6 consists of Arsenal, Liverpool, Manchester United, Manchester City, Chelsea, and Tottenham. My goal was to see if there was a notable difference in the number of fouls produced for the big six vs their opponents.\n\nlibrary(tidyverse)\nlibrary(here)\nlibrary(knitr)\ntheme_set(theme_minimal())\nsoccer &lt;- read_csv(here(\"data/soccer.csv\"))\n\n\n\nData Cleaning\nMy first step was to get rid of the halftime data, the shots data, the goals data, the winners data, and the corners data because I wouldn’t be needing it for my analysis. I chose to keep the referee variable and cards variables just in case I want to use it later. I also wanted to make the variable names easier to interpret.\n\nsoccerTidy &lt;-\n  soccer |&gt;\n  select(-starts_with(\"HT\")) |&gt;\n  select(-(4:6)) |&gt;\n  select(-(5:8)) |&gt;\n  select(-(7:8)) |&gt;\n  rename('HomeFouls' = HF) |&gt;\n  rename('AwayFouls' = AF) |&gt;\n  rename('HomeYellow' = HY) |&gt;\n  rename('AwayYellow' = AY) |&gt;\n  rename('HomeRed' = HR) |&gt;\n  rename('AwayRed' = AR)\n\nBelow is a sample of what the data now looks like.\n\nkable(head(soccerTidy))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDate\nHomeTeam\nAwayTeam\nReferee\nHomeFouls\nAwayFouls\nHomeYellow\nAwayYellow\nHomeRed\nAwayRed\n\n\n\n\n13/08/2021\nBrentford\nArsenal\nM Oliver\n12\n8\n0\n0\n0\n0\n\n\n14/08/2021\nMan United\nLeeds\nP Tierney\n11\n9\n1\n2\n0\n0\n\n\n14/08/2021\nBurnley\nBrighton\nD Coote\n10\n7\n2\n1\n0\n0\n\n\n14/08/2021\nChelsea\nCrystal Palace\nJ Moss\n15\n11\n0\n0\n0\n0\n\n\n14/08/2021\nEverton\nSouthampton\nA Madley\n13\n15\n2\n0\n0\n0\n\n\n14/08/2021\nLeicester\nWolves\nC Pawson\n6\n10\n1\n2\n0\n0\n\n\n\n\n\n\n\nPreparing for Visuals\nNext I needed to make multiple data frames, a home and away for the big 6 which could then be joined so I could compare how many fouls they got when versing non big 6 opponents.\nSide Note: All of this was a huge pain, and there is likely a much easier way to do this. Below is all the code of making data frames and joining them together until I have something that works for showing the distribution.\n\nbig6_Home &lt;-\n  soccerTidy |&gt;\n  filter(HomeTeam %in% c('Arsenal', 'Liverpool', 'Man United', 'Man City', 'Chelsea', 'Tottenham')) |&gt;\n    filter(!(AwayTeam %in% c('Arsenal', 'Liverpool', 'Man United', 'Man City', 'Chelsea', 'Tottenham')))\n\nbig6_Away &lt;-\n  soccerTidy |&gt;\n  filter(AwayTeam %in% c('Arsenal', 'Liverpool', 'Man United', 'Man City', 'Chelsea', 'Tottenham')) |&gt;\n  filter(!(HomeTeam %in% c('Arsenal', 'Liverpool', 'Man United', 'Man City', 'Chelsea', 'Tottenham')))\n\n\nbig6_fouls &lt;-\n  big6_Home |&gt;\n    group_by(HomeTeam) |&gt;\n  mutate('Big_6' = 'Yes') |&gt;\n  select(HomeTeam, HomeFouls, Big_6)\n\nopp_fouls &lt;-\n  big6_Home |&gt;\n    group_by(HomeTeam) |&gt;\n  mutate('Big_6' = 'No') |&gt;\n  select(HomeTeam, AwayFouls, Big_6)\n\nhome_fouls &lt;-\n  bind_rows(big6_fouls, opp_fouls) |&gt;\n  pivot_longer(cols = c('HomeFouls', 'AwayFouls'),\n               names_to = 'Location',\n               values_to = 'Fouls') |&gt;\n  select(-(Location)) |&gt;\n  na.omit() |&gt;\n  mutate(Location = 'Home')\n\n\nAbig6_fouls &lt;-\n  big6_Away |&gt;\n    group_by(AwayTeam) |&gt;\n  mutate('Big_6' = 'Yes') |&gt;\n  select(AwayTeam, AwayFouls, Big_6)\n\nAopp_fouls &lt;-\n  big6_Away |&gt;\n    group_by(AwayTeam) |&gt;\n  mutate('Big_6' = 'No') |&gt;\n  select(AwayTeam, HomeFouls, Big_6)\n\naway_fouls &lt;-\n  bind_rows(Abig6_fouls, Aopp_fouls) |&gt;\n  pivot_longer(cols = c('HomeFouls', 'AwayFouls'),\n               names_to = 'Location',\n               values_to = 'Fouls') |&gt;\n  select(-(Location)) |&gt;\n  na.omit() |&gt;\n  mutate(Location = 'Away') |&gt;\n  rename('HomeTeam' = AwayTeam)\n\n\nfouls_df &lt;-\n  bind_rows(home_fouls, away_fouls) |&gt;\n  mutate(Big_6 = as_factor(Big_6))\n\n\n\nPlot 1\n\n#|fig-width: 12\nggplot(data = fouls_df,\n       aes(x = HomeTeam,\n           y = Fouls,\n           fill = Big_6)) +\n  geom_boxplot(position = position_dodge(width = 1)) +\n  facet_wrap(vars(Location)) +\n  theme_minimal() +\n  theme(axis.title = element_text(size = 14,),\n        strip.text = element_text(size = 12),\n        strip.background = element_rect(colour = \"black\",\n                                        fill = \"ivory\"),\n        axis.title.y = element_blank(),\n        plot.title = element_text(size = 16,\n                                  hjust = 0),\n        panel.spacing = unit(2, 'lines'),\n        panel.background = element_rect(fill = \"ivory\"),\n        plot.background = element_rect(fill = \"ivory\"),\n        plot.caption = element_text(hjust = 1.33)) +\n  labs(title = 'Distribution of Fouls in Big 6 Games Both Home and Away',\n       caption = '(based on data from Evan Gower via Kaggle)',\n       y = 'Number of Fouls',\n       fill = 'In Big 6?') +\n  coord_flip() +\n  scale_fill_brewer(palette = 'Pastel2')\n\n\n\n\nThis plot shows the distribution of fouls for all the Big 6 teams both home and away as well as their opponents. When I had this idea, I was expecting to see a somewhat lower distribution for all of the Big 6 teams relative to their opponent, but I was surprised. For the most part, the fouls seam relatively even with the biggest advantage appearing to be Arsenal in home games. Below I created a table to show the average number of fouls per game for each Big 6 team.\n\n\nTable 1\n\ntb6 &lt;-\nfouls_df |&gt;\n  filter(Big_6 == 'Yes') |&gt;\n  group_by(HomeTeam) |&gt;\n  summarise('Fouls per Game for Big 6 Teams' = mean(Fouls))\n\ntb &lt;-\n  fouls_df |&gt;\n  filter(Big_6 == 'No') |&gt;\n  group_by(HomeTeam) |&gt;\n  summarise('Fouls per Game for Opponents' = mean(Fouls)) |&gt;\n  select(-HomeTeam)\n\ntb &lt;-\n  bind_cols(tb6, tb)\n\nkable(tb)\n\n\n\n\n\n\n\n\n\nHomeTeam\nFouls per Game for Big 6 Teams\nFouls per Game for Opponents\n\n\n\n\nArsenal\n9.285714\n10.321429\n\n\nChelsea\n11.214286\n10.750000\n\n\nLiverpool\n9.214286\n8.000000\n\n\nMan City\n8.321429\n8.607143\n\n\nMan United\n10.357143\n8.464286\n\n\nTottenham\n10.357143\n10.535714\n\n\n\n\n\nThis table shows that only a few Big 6 teams average less than their opponents, those being Arsenal, Man City, and Tottenham. I would say that for the most part, this shows that there isn’t bias towards the Big 6.\n\n\nConclusion\nUltimately, it seems as if there isn’t bias towards the Big 6 in terms of the number of fouls for them and for their opponents. As well, I was hoping to create some form of model to predict this, but it wasn’t a good possibility with this data set. Looking to the future, I likely would have added in another question and made a new visual as this one is super busy and not the best to interpret, but the process to get there took a while so I’ve decided to keep it. I might come back to this data in the future to try and answer a different question.\n\n\nConnections to Class\nI used many techniques we’ve learned in class in this post. Some being the dplyr tools such as filtering and selecting, binding and merging tables. I also used most of the ggplot techniques from faceting, flipping the coordinates, and adjusting the theme elements to make it look nicer."
  },
  {
    "objectID": "posts/blog-post-1/blog-post-1.html",
    "href": "posts/blog-post-1/blog-post-1.html",
    "title": "Finding Indicators for Stock Prices",
    "section": "",
    "text": "Introduction:\nAfter finding a data set showing the stock prices of big tech companies, I decided I wanted to investigate to see if there were any correlations to find trends in how their prices perform. This dataset began in 2010 and went to January of 2023 so I decided to cut down the time frame to the most recent five years. I also chose to use the six companies in this dataset with the highest observed closing prices. This allows for less clutter in my visualizations.\n\npricesNew &lt;-\n  prices |&gt;\n  filter(date &gt; '2018-01-01')\n\nprices |&gt;\n  group_by(stock_symbol) |&gt;\n  summarise(max = max(close)) |&gt;\n  arrange(desc(max)) |&gt;\n  head(n = 6)\n\n# A tibble: 6 × 2\n  stock_symbol   max\n  &lt;chr&gt;        &lt;dbl&gt;\n1 NFLX          692.\n2 ADBE          688.\n3 TSLA          410.\n4 META          382.\n5 MSFT          343.\n6 NVDA          334.\n\npricesNew &lt;- \n  pricesNew|&gt;\n  group_by(stock_symbol) |&gt;\n  filter(stock_symbol == c(\"NFLX\", \"ADBE\", \"TSLA\", \"MSFT\", \"NVDA\", \"META\"))\n\n\n\nPlot 1\n\npricesNew |&gt;\n  ggplot(aes(x = date,\n             y = close)) +\n  geom_line(aes(color = stock_symbol),\n            linewidth = .9) +\n  scale_color_brewer(palette = \"Paired\") + \n  labs(x = \"Date\",\n       y = \"Closing Price ($)\",\n       title = \"Closing Stock Prices from 6 Big Tech Companies, 2018-2023\",\n       color = \"Tickers\",\n       caption = \"(based on data from Yahoo Finance via Kaggle)\") +\n  scale_x_date(date_minor_breaks = \"6 months\",\n               date_breaks = \"1 year\",\n               date_labels = \"%b %y\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45,\n                                   hjust = 1,\n                                   vjust = 1),\n        plot.title = element_text(size = 16,\n                                  hjust = 0),\n        axis.title.x = element_blank(),\n        axis.title.y = element_text(size = 14),\n        panel.background = element_rect(fill = \"ivory\"),\n        plot.background = element_rect(fill = \"ivory\"),\n        plot.caption = element_text(hjust = 1.35))\n\n\n\n\nMy first plot shows the change in price for these six companies and it is easy to see that around January 2022, they all began to take a hit in their price. This begged the question, were there any indicators that this was going to happen? In order to attack this, I decided to investigate the short- and long-term moving averages for each stock, specifically the exponential moving average. An exponential moving average calculates the average of the prices using a weighting multiplier that assigns more weight to later data. In general, when a short-term EMA crosses a long-term EMA, this signifies either a price increase or decrease.\nTo calculate this, I had to make a new data set with the dates extending further back in order to get more observations for the moving averages. I also calculated the average price so it can be used as the y-variable.\n\npricesMA &lt;-\n  prices |&gt;\n  group_by(stock_symbol) |&gt;\n  filter(stock_symbol == c(\"NFLX\", \"ADBE\", \"TSLA\", \"MSFT\", \"NVDA\", \"META\")) |&gt;\n  pivot_longer(cols = 3:6,\n               values_to = \"price\",\n               names_to = \"market\")\n\npricesMA &lt;-\n  pricesMA |&gt;\n  group_by(stock_symbol, date) |&gt;\n  summarise(avgPrice = mean(price))\n\nprices_select &lt;-\n  prices |&gt;\n  filter(stock_symbol == c(\"NFLX\", \"ADBE\", \"TSLA\", \"MSFT\", \"NVDA\", \"META\"))\n\n\n\nPlot 2\n\npricesMA |&gt;\n  ggplot(aes(x = date,\n             y = avgPrice)) +\n  geom_ma(ma_fun = EMA,\n          n = 50,\n          aes(color = \"50 EMA\"))+\n  geom_ma(ma_fun = EMA,\n          n = 200,\n          aes(color = \"200 EMA\")) +\n  facet_wrap(vars(stock_symbol),\n             scales = \"free_y\") +\n    scale_x_date(date_breaks = \"4 year\",\n                 date_labels = \"%b %y\") +\n  labs(y = \"Dollars ($)\",\n       colour = \"Moving Averages\",\n       title = \"Short- and Long-Term EMA Compared to Closing Prices, 2010-2023\",\n       caption = \"(based on data from Yahoo Finance via Kaggle) EMAs are calculated from library(tidyquant)\") +\n  theme(axis.text.x = element_text(angle = 45,\n                                   hjust = 1,\n                                   vjust = 1),\n        plot.title = element_text(size = 16,\n                                  hjust = 0),\n        axis.title.x = element_blank(),\n        axis.title.y = element_text(size = 14),\n        panel.spacing = unit(1, \"lines\"),\n        strip.text.x = element_text(color = \"black\", \n                                    face = \"bold\"),\n        strip.background = element_rect(colour = \"black\",\n                                        fill = \"ivory\"),\n        legend.title = element_blank(),\n        panel.background = element_rect(fill = \"ivory\"),\n        plot.background = element_rect(fill = \"ivory\"),\n        plot.caption = element_text(hjust = 1)) +\n  geom_line(data = prices_select,\n            aes(x = date,\n                y = close),\n            linetype = 1,\n            color = \"black\",\n            alpha = .2)\n\n\n\n\n\n\nConclusion:\nIn this plot, I plotted the moving averages against the closing prices from Plot 1 except this time I faceted by each company in order to compare the companies individually. This leads us to our answer to the original question of if there is a trend or indicator of the price decrease. Typically, when a short-term EMA crosses above the long-term EMA, this is a signal that price might continue to move up. On the opposite hand, this means that if short-term EMA crosses below long-term EMA, price might continue to move down. In every company shown, up until the closing price drop, the short-term was above the long-term. Once the gap between them closed, and short-term came closer to long-term, the closing prices began to decrease. In some of the companies, the short-term even dipped below the long term. In conclusion, using moving averages can be a good indicator for these companies prices going down, but likely isn’t the root of the scenario. That can be left to many other more complex factors.\n\n\nConnections to Class:\nI used many techniques we used in class. The three main ones were changing theme elements, faceting, and using a color scale."
  },
  {
    "objectID": "posts/blog-post-4/blog-post-4.html",
    "href": "posts/blog-post-4/blog-post-4.html",
    "title": "NBA Analysis Final Project",
    "section": "",
    "text": "Introduction\nIn this final project, I set out to create a shiny app that allows you to quickly look at an NBA player’s statistics for a given season, see a breakdown of their shooting, and a model that predicts the probability of them making a shot based on the distance they take it from. There is no data set for this project, but it is done using an API package called nbastatR. According to the documentation, this is described as, “An interface for professional basketball data in R. Data sources include, but are not limited to: NBA Stats API, Basketball Insiders, Basketball-Reference, HoopsHype, and RealGM. Overtime additional data sources will be added.”\nWhen you use the API package it does create data frames. The one I used for this project is done using the teams_shots() function. Below is an example of what is in the data frame.\n\n# These are all the packages that I used, the main one being nbastatR\nlibrary(shiny)\nlibrary(nbastatR)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(extrafont)\nlibrary(cowplot)\nlibrary(shinyWidgets)\nlibrary(broom)\nlibrary(modelr)\nlibrary(DT)\nlibrary(knitr)\nSys.setenv(VROOM_CONNECTION_SIZE=500000)\n\n\nlibrary(nbastatR)\nteams &lt;-\n  nba_teams() |&gt;\n  filter(isNonNBATeam == 0) |&gt;\n  filter(!is.na(colorsTeam))\n\nteams &lt;-\n  teams_shots(teams = \"Golden State Warriors\",\n              seasons = 2024)\n\nGolden State Warriors 2023-24 shot data\n\nteams &lt;-\n  teams |&gt;\n  filter(namePlayer == \"Stephen Curry\")\n\nplayer &lt;-\n  teams |&gt;\n  mutate(isShotMade = as.numeric(isShotMade))\nkable(head(player))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nyearSeason\nslugSeason\nidTeam\nidPlayer\ntypeGrid\nnamePlayer\nnameTeam\ntypeEvent\ntypeAction\ntypeShot\ndateGame\nslugTeamHome\nslugTeamAway\nidGame\nidEvent\nnumberPeriod\nminutesRemaining\nzoneBasic\nnameZone\nslugZone\nzoneRange\nlocationX\nlocationY\nsecondsRemaining\ndistanceShot\nisShotAttempted\nisShotMade\n\n\n\n\n2024\n2023-24\n1610612744\n201939\nShot Chart Detail\nStephen Curry\nGolden State Warriors\nMissed Shot\nRunning Pull-Up Jump Shot\n3PT Field Goal\n20231103\nOKC\nGSW\n22300005\n40\n1\n8\nAbove the Break 3\nLeft Side Center\nLC\n24+ ft.\n-188\n153\n17\n24\nTRUE\n0\n\n\n2024\n2023-24\n1610612744\n201939\nShot Chart Detail\nStephen Curry\nGolden State Warriors\nMade Shot\nJump Shot\n3PT Field Goal\n20231103\nOKC\nGSW\n22300005\n53\n1\n7\nAbove the Break 3\nRight Side Center\nRC\n24+ ft.\n145\n243\n0\n28\nTRUE\n1\n\n\n2024\n2023-24\n1610612744\n201939\nShot Chart Detail\nStephen Curry\nGolden State Warriors\nMade Shot\nRunning Pull-Up Jump Shot\n3PT Field Goal\n20231103\nOKC\nGSW\n22300005\n249\n2\n6\nAbove the Break 3\nCenter\nC\n24+ ft.\n50\n272\n15\n27\nTRUE\n1\n\n\n2024\n2023-24\n1610612744\n201939\nShot Chart Detail\nStephen Curry\nGolden State Warriors\nMissed Shot\nDriving Layup Shot\n2PT Field Goal\n20231103\nOKC\nGSW\n22300005\n281\n2\n3\nIn The Paint (Non-RA)\nCenter\nC\nLess Than 8 ft.\n-45\n0\n23\n4\nTRUE\n0\n\n\n2024\n2023-24\n1610612744\n201939\nShot Chart Detail\nStephen Curry\nGolden State Warriors\nMade Shot\nStep Back Jump shot\n3PT Field Goal\n20231103\nOKC\nGSW\n22300005\n292\n2\n2\nRight Corner 3\nRight Side\nR\n24+ ft.\n230\n83\n29\n24\nTRUE\n1\n\n\n2024\n2023-24\n1610612744\n201939\nShot Chart Detail\nStephen Curry\nGolden State Warriors\nMissed Shot\nJump Shot\n3PT Field Goal\n20231103\nOKC\nGSW\n22300005\n305\n2\n1\nAbove the Break 3\nCenter\nC\n24+ ft.\n-43\n253\n43\n25\nTRUE\n0\n\n\n\n\n\n\n\nShot Chart\nFrom here, I had most of what I needed. But next I needed to make a short chart from which I got inspiration from a youtube tutorial. Below is the code to create the court, and add the makes and misses in.\n\ncircle_points = function(center = c(0, 0),\n                         radius = 1,\n                         npoints = 360) {\n  angles = seq(0, 2 * pi, length.out = npoints)\n  return(data_frame(\n    x = center[1] + radius * cos(angles),\n    y = center[2] + radius * sin(angles)\n  ))\n}\n\n# Court Dimensions & lines\nwidth = 50\nheight = 94 / 2\nkey_height = 19\ninner_key_width = 12\nouter_key_width = 16\nbackboard_width = 6\nbackboard_offset = 4\nneck_length = 0.5\nhoop_radius = 0.75\nhoop_center_y = backboard_offset + neck_length + hoop_radius\nthree_point_radius = 23.75\nthree_point_side_radius = 22\nthree_point_side_height = 14\n\n# Court themes\ncourt_themes = list(\n  light = list(\n    court = 'ivory',\n    lines = '#999999',\n    text = '#222222',\n    made = '#00bfc4',\n    missed = '#f8766d',\n    hex_border_size = 1,\n    hex_border_color = \"ivory\"\n  ),\n  dark = list(\n    court = '#000004',\n    lines = '#999999',\n    text = '#f0f0f0',\n    made = '#00bfc4',\n    missed = '#f8766d',\n    hex_border_size = 0,\n    hex_border_color = \"#000000\"\n  ),\n  ppt = list(\n    court = 'gray20',\n    lines = 'white',\n    text = '#f0f0f0',\n    made = '#00bfc4',\n    missed = '#f8766d',\n    hex_border_size = 0,\n    hex_border_color = \"gray20\"\n  )\n)\n\n# Function to create court based on given dimensions\nplot_court = function(court_theme = court_themes$light,\n                      use_short_three = FALSE) {\n  if (use_short_three) {\n    three_point_radius = 22\n    three_point_side_height = 0\n  }\n  \n  court_points = data_frame(\n    x = c(width / 2, width / 2,-width / 2,-width / 2, width / 2),\n    y = c(height, 0, 0, height, height),\n    desc = \"perimeter\"\n  )\n  \n  court_points = bind_rows(court_points , data_frame(\n    x = c(\n      outer_key_width / 2,\n      outer_key_width / 2,\n      -outer_key_width / 2,\n      -outer_key_width / 2\n    ),\n    y = c(0, key_height, key_height, 0),\n    desc = \"outer_key\"\n  ))\n  \n  court_points = bind_rows(court_points , data_frame(\n    x = c(-backboard_width / 2, backboard_width / 2),\n    y = c(backboard_offset, backboard_offset),\n    desc = \"backboard\"\n  ))\n  \n  court_points = bind_rows(court_points , data_frame(\n    x = c(0, 0),\n    y = c(backboard_offset, backboard_offset + neck_length),\n    desc = \"neck\"\n  ))\n  \n  foul_circle = circle_points(center = c(0, key_height), radius = inner_key_width / 2)\n  \n  foul_circle_top = filter(foul_circle, y &gt; key_height) %&gt;%\n    mutate(desc = \"foul_circle_top\")\n  \n  foul_circle_bottom = filter(foul_circle, y &lt; key_height) %&gt;%\n    mutate(\n      angle = atan((y - key_height) / x) * 180 / pi,\n      angle_group = floor((angle - 5.625) / 11.25),\n      desc = paste0(\"foul_circle_bottom_\", angle_group)\n    ) %&gt;%\n    filter(angle_group %% 2 == 0) %&gt;%\n    select(x, y, desc)\n  \n  hoop = circle_points(center = c(0, hoop_center_y), radius = hoop_radius) %&gt;%\n    mutate(desc = \"hoop\")\n  \n  restricted = circle_points(center = c(0, hoop_center_y), radius = 4) %&gt;%\n    filter(y &gt;= hoop_center_y) %&gt;%\n    mutate(desc = \"restricted\")\n  \n  three_point_circle = circle_points(center = c(0, hoop_center_y), radius = three_point_radius) %&gt;%\n    filter(y &gt;= three_point_side_height, y &gt;= hoop_center_y)\n  \n  three_point_line = data_frame(\n    x = c(\n      three_point_side_radius,\n      three_point_side_radius,\n      three_point_circle$x,\n      -three_point_side_radius,\n      -three_point_side_radius\n    ),\n    y = c(\n      0,\n      three_point_side_height,\n      three_point_circle$y,\n      three_point_side_height,\n      0\n    ),\n    desc = \"three_point_line\"\n  )\n  \n  court_points = bind_rows(\n    court_points,\n    foul_circle_top,\n    foul_circle_bottom,\n    hoop,\n    restricted,\n    three_point_line\n  )\n  \n  court_points &lt;- court_points\n  \n  # Final plot creation\n  ggplot() +\n    geom_path(data = court_points,\n              aes(x = x, y = y, group = desc),\n              color = court_theme$lines) +\n    coord_fixed(ylim = c(0, 45), xlim = c(-25, 25)) +\n    theme_minimal(base_size = 22) +\n    theme(\n      text = element_text(color = court_theme$text),\n      plot.background = element_rect(fill = 'ivory', color = 'black'),\n      panel.background = element_rect(fill = court_theme$court, color = court_theme$court),\n      panel.grid = element_blank(),\n      panel.border = element_blank(),\n      axis.text = element_blank(),\n      axis.title = element_blank(),\n      axis.ticks = element_blank(),\n      legend.background = element_rect(fill = court_theme$court, color = court_theme$court),\n      legend.margin = margin(-1, 0, 0, 0, unit = \"lines\"),\n      legend.position = \"bottom\",\n      legend.key = element_blank(),\n      legend.text = element_text(size = rel(1.0))\n    )\n}\nteams &lt;-\n  teams |&gt;\n  mutate(x = as.numeric(as.character(locationX)) / 10,\n         y = as.numeric(as.character(locationY)) / 10 + hoop_center_y)\n\n\np1 &lt;-\n  plot_court(court_themes$light,\n             use_short_three = T) +\n  geom_point(\n    data = teams,\n    aes(\n      x = x,\n      y = y,\n      color = isShotMade,\n      fill = isShotMade\n    ),\n    size = 3,\n    shape = 21,\n    stroke = .5\n  ) +\n  scale_color_manual(\n    values = c(\"green4\", \"red3\"),\n    aesthetics = \"color\",\n    labels = c(\"Made\", \"Missed\")\n  ) +\n  scale_fill_manual(\n    values = c(\"green2\", \"gray20\"),\n    aesthetics = \"fill\",\n    labels = c(\"Made\", \"Missed\")\n  ) +\n  scale_x_continuous(limits = c(-27.5, 27.5)) +\n  scale_y_continuous(limits = c(0, 45)) +\n  theme(\n    plot.title = element_text(\n      hjust = .5,\n      size = 22,\n      family = \"Times New Roman\",\n      face = \"bold\",\n      vjust = -4\n    ),\n    plot.subtitle = element_text(\n      hjust = .5,\n      size = 10,\n      family = \"Times New Roman\",\n      face = \"bold\",\n      vjust = -8\n    ),\n    legend.position = c(.5, .98),\n    legend.direction = \"horizontal\",\n    legend.title = element_blank(),\n    legend.text = element_text(\n      hjust = .5,\n      size = 10,\n      family = \"Times New Roman\",\n      face = \"bold\",\n      colour = \"black\"\n    ),\n    plot.caption = element_text(\n      hjust = .5,\n      size = 6,\n      family = \"Times New Roman\",\n      face = \"bold\",\n      colour = \"lightgrey\",\n      vjust = 8\n    )\n  ) +\n  labs(title = \"Stephen Curry Shot Chart\")\n\nggdraw(p1) + theme(plot.background = element_rect(fill = \"ivory\", color = NA))\n\n\n\n\n\n\nLogistic Regression Model\nNext, I chose to make a logistic regression model to predict the probability of a shot going in dependent on the distance it is being taken from. Below is the code for the model and for the visual of the results.\n\nmod &lt;- glm(isShotMade ~ distanceShot,\n           data = player,\n           family = \"binomial\")\n\ngrid &lt;-\n  data_grid(player,\n            distanceShot = seq_range(distanceShot, n = 1000))\n\naug &lt;-\n  augment(mod,\n          newdata = grid,\n          se_fit = TRUE)\n\naug &lt;-\n  aug |&gt;\n  mutate(.predprob = (exp(.fitted) / (1 + exp(.fitted)))) |&gt;\n  mutate(min = .predprob - .se.fit,\n         max = .predprob + .se.fit)\n\n\nmade &lt;-\n  player |&gt;\n  filter(isShotMade == 1)\n\nmissed &lt;-\n  player |&gt;\n  filter(isShotMade == 0)\n\n\nggplot(aug,\n       aes(x = distanceShot,\n           y = .predprob)) +\n  geom_line(linewidth = 1.2,\n            colour = \"blue\") +\n  geom_rug(data = made,\n           sides = \"t\",\n           alpha = 0.3,\n           aes(y = isShotMade)) +\n  geom_rug(data = missed,\n           sides = \"b\",\n           alpha = 0.3,\n           aes(y = isShotMade)) +\n  geom_ribbon(aes(ymin = min,\n                  ymax = max),\n              fill = \"blue\",\n              alpha = 0.2) +\n  scale_x_continuous(breaks = seq(0, 70, 20)) +\n  theme_minimal() +\n  labs(x = \"Shot Distance\",\n       y = \"Predicted Probability\",\n       title = \"Stephen Curry Shot Make Probability Model\") +\n  theme(\n    panel.background = element_rect(fill = \"ivory\"),\n    plot.background = element_rect(fill = \"ivory\"),\n    plot.title = element_text(family = \"Times New Roman\")\n  )\n\n\n\n\n\n\nShiny App\nNow that I had static versions of the visualizations I wanted, I wanted to add the ability for a user to interact. To do this, I used a shiny app with lots of interactivity. This would allow the user to pick a season that they wanted to look at as well as a player. This shiny app also uses some of the other functions in the nbastatR package so we can also look at their season averages for the selected season. Below is all the code used to add this functionality to the shiny app, as well as a link to the shiny app itself.\n\n# teams &lt;-\n#   nba_teams() |&gt;\n#   filter(isNonNBATeam == 0) |&gt;\n#   filter(!is.na(colorsTeam)) |&gt;\n#   mutate(nameTeam = factor(nameTeam)) |&gt;\n#   pull(nameTeam) |&gt;\n#   levels()\n# \n# ui &lt;- fluidPage(\n#   theme = bslib::bs_theme(bootswatch = \"sandstone\"),\n#   setBackgroundColor(\n#     color = \"ivory\",\n#     gradient = c(\"linear\", \"radial\")\n#   ),\n#   sidebarLayout(\n#     sidebarPanel(\n#       sliderInput(\n#         \"season\",\n#         \"Choose a Season (2024 -&gt; 23-24)\",\n#         min = 2000,\n#         max = 2024,\n#         value = 2024,\n#         sep = \"\"\n#       ),\n#       selectInput(\"team_choices\",\n#                   \"Choose a NBA Team\",\n#                   choices = teams),\n#       selectInput(\"player\",\n#                   \"Choose a Player\",\n#                   choices = NULL),\n#       actionButton(\"button\",\n#                    \"Update\")\n#     ),\n#     mainPanel(\n#       tabsetPanel(\n#         tabPanel(\n#           \"Shot Chart and Stats\",\n#           plotOutput(\"player_plot\"),\n#           DT::dataTableOutput(\"shot_metrics\"),\n#           DT::dataTableOutput(\"zone_type\"),\n#         ),\n#         tabPanel(\"Shot Probability\",\n#                  plotOutput(\"log_model\")\n#         )\n#       )\n#     )\n#   ),\n# )\n# \n# server &lt;- function(input, output, session) {\n#   team_react &lt;-\n#     reactive({\n#       teams_shots(teams = input$team_choices,\n#                   seasons = input$season)\n#     })\n#   \n#   observeEvent(input$team_choices, {\n#     player_choices &lt;-\n#       team_react() |&gt;\n#       filter(nameTeam == input$team_choices) |&gt;\n#       mutate(namePlayer = factor(namePlayer)) |&gt;\n#       pull(namePlayer) |&gt;\n#       levels()\n#     \n#     updateSelectInput(inputId = \"player\",\n#                       choices = player_choices)\n#   })\n#   \n#   observeEvent(input$season, {\n#     player_choices &lt;-\n#       team_react() |&gt;\n#       filter(nameTeam == input$team_choices) |&gt;\n#       mutate(namePlayer = factor(namePlayer)) |&gt;\n#       pull(namePlayer) |&gt;\n#       levels()\n#     \n#     updateSelectInput(inputId = \"player\",\n#                       choices = player_choices)\n#   })\n#   \n#   player_react &lt;-\n#     eventReactive(input$button, {\n#       team_react() |&gt;\n#         filter(namePlayer == input$player) |&gt;\n#         mutate(\n#           x = as.numeric(as.character(locationX)) / 10,\n#           y = as.numeric(as.character(locationY)) / 10 + hoop_center_y\n#         )\n#     })\n#   \n#   model_react &lt;-\n#     eventReactive(input$button, {\n#       team_react() |&gt;\n#         filter(namePlayer == input$player)\n#     })\n#   \n#   model &lt;-\n#     reactive({\n#       mod &lt;- glm(isShotMade ~ distanceShot,\n#           data = model_react(),\n#           family = \"binomial\")\n#       \n#       grid &lt;-\n#         data_grid(model_react(),\n#                   distanceShot = seq_range(distanceShot, n = 1000)\n#         )\n#       \n#       aug &lt;-\n#         augment(mod,\n#                 newdata = grid,\n#                 se_fit = TRUE)\n#       \n#       aug &lt;-\n#         aug |&gt;\n#         mutate(.predprob = (exp(.fitted) / (1 + exp(.fitted)))) |&gt;\n#         mutate(min = .predprob - .se.fit,\n#                max = .predprob + .se.fit)\n#         \n#     })\n#   \n#   output$player_plot &lt;-\n#     renderPlot({\n#       \n#       p1 &lt;-\n#         plot_court(court_themes$light,\n#                    use_short_three = T) +\n#         geom_point(\n#           data = player_react(),\n#           aes(\n#             x = x,\n#             y = y,\n#             color = player_react()$isShotMade,\n#             fill = player_react()$isShotMade\n#           ),\n#           size = 3,\n#           shape = 21,\n#           stroke = .5\n#         ) +\n#         scale_color_manual(\n#           values = c(\"green4\", \"red3\"),\n#           aesthetics = \"color\",\n#           labels = c(\"Made\", \"Missed\")\n#         ) +\n#         scale_fill_manual(\n#           values = c(\"green2\", \"gray20\"),\n#           aesthetics = \"fill\",\n#           labels = c(\"Made\", \"Missed\")\n#         ) +\n#         scale_x_continuous(limits = c(-27.5, 27.5)) +\n#         scale_y_continuous(limits = c(0, 45)) +\n#         theme(\n#           plot.title = element_text(\n#             hjust = .5,\n#             size = 22,\n#             family = \"Times New Roman\",\n#             face = \"bold\",\n#             vjust = -4\n#           ),\n#           plot.subtitle = element_text(\n#             hjust = .5,\n#             size = 10,\n#             family = \"Times New Roman\",\n#             face = \"bold\",\n#             vjust = -8\n#           ),\n#           legend.position = c(.5, .98),\n#           legend.direction = \"horizontal\",\n#           legend.title = element_blank(),\n#           legend.text = element_text(\n#             hjust = .5,\n#             size = 10,\n#             family = \"Times New Roman\",\n#             face = \"bold\",\n#             colour = \"black\"\n#           ),\n#           plot.caption = element_text(\n#             hjust = .5,\n#             size = 6,\n#             family = \"Times New Roman\",\n#             face = \"bold\",\n#             colour = \"lightgrey\",\n#             vjust = 8\n#           )\n#         ) +\n#         labs(title = glue::glue(input$player, \" Shot Chart\"))\n#       \n#       ggdraw(p1) + theme(plot.background = element_rect(fill = \"ivory\", color = NA))\n#     })\n# \n#   output$log_model &lt;-\n#     renderPlot({\n#       \n#       made &lt;-\n#         player_react() |&gt;\n#         filter(isShotMade == 1)\n#       \n#       missed &lt;-\n#         player_react() |&gt;\n#         filter(isShotMade == 0)\n# \n#       ggplot(model(),\n#              aes(x = distanceShot,\n#                  y = .predprob)) +\n#         geom_line(linewidth = 1.2,\n#                   colour = \"blue\") +\n#         geom_rug(data = made,\n#                  sides = \"t\",\n#                  alpha = 0.75,\n#                  aes(y = as.numeric(isShotMade))) +\n#         geom_rug(data = missed,\n#                  sides = \"b\",\n#                  alpha = 0.75,\n#                  aes(y = as.numeric(isShotMade))) +\n#         geom_ribbon(aes(ymin = min,\n#                         ymax = max),\n#                     fill = \"blue\",\n#                     alpha = 0.2) +\n#         theme_minimal() +\n#         scale_x_continuous(breaks = seq(0, 70, 10)) +\n#         labs(x = \"Shot Distance\",\n#              y = \"Predicted Probability\",\n#              title = glue::glue(input$player, \" Shot Make Probability Model\")) +\n#         theme(\n#           panel.background = element_rect(fill = \"ivory\"),\n#           plot.background = element_rect(fill = \"ivory\"),\n#           plot.title = element_text(family = \"Times New Roman\")\n#         )\n#     })\n#   \n#   zone &lt;-\n#     eventReactive(input$button, {\n#       player_react() |&gt;\n#         group_by(zoneRange) |&gt;\n#         summarise(`Percent of Shots Made` = round(mean(isShotMade), 2),\n#                   `Number of Shots Attempted` = n()) |&gt;\n#         filter(`Number of Shots Attempted` &gt;= 10) |&gt;\n#         arrange(desc(`Percent of Shots Made`)) |&gt;\n#         rename(\"Distance\" = zoneRange)\n#     })\n#   \n#   metrics &lt;-\n#     eventReactive(input$button, {\n#       metrics &lt;- bref_players_stats(seasons = input$season,\n#                                     tables = \"per_game\") |&gt;\n#         filter(namePlayer == input$player) |&gt;\n#         select(\n#           -c(\n#             \"slugSeason\",\n#             \"groupPosition\",\n#             \"yearSeason\",\n#             \"isSeasonCurrent\",\n#             \"slugPlayerSeason\",\n#             \"slugPlayerBREF\",\n#             \"isHOFPlayer\",\n#             \"slugTeamsBREF\",\n#             \"pctFG2\",\n#             \"fg2mPerGame\",\n#             \"fg2aPerGame\",\n#             \"idPlayerNBA\",\n#             \"urlPlayerThumbnail\",\n#             \"urlPlayerHeadshot\",\n#             \"urlPlayerPhoto\",\n#             \"urlPlayerStats\",\n#             \"urlPlayerActionPhoto\",\n#             \"countTeamsPlayerSeasonPerGame\",\n#             \"urlPlayerBREF\"\n#           )\n#         ) |&gt;\n#         rename(\"Name\" = namePlayer,\n#                \"Position\" = slugPosition,\n#                \"Age\" = agePlayer,\n#                \"Team\" = slugTeamBREF,\n#                \"G\" = countGames,\n#                \"GS\" = countGamesStarted,\n#                \"FG%\"= pctFG,\n#                \"3P%\" = pctFG3,\n#                \"eFG%\" = pctEFG,\n#                \"FT%\" = pctFT,\n#                \"MP\" = minutesPerGame,\n#                \"FGM\" = fgmPerGame,\n#                \"FGA\" = fgaPerGame,\n#                \"3P\" = fg3mPerGame,\n#                \"3PA\" = fg3aPerGame,\n#                \"FT\" = ftmPerGame,\n#                \"FTA\" = ftaPerGame,\n#                \"ORB\" = orbPerGame,\n#                \"DRB\" = drbPerGame,\n#                \"TRB\" = trbPerGame,\n#                \"AST\" = astPerGame,\n#                \"STL\" = stlPerGame,\n#                \"BLK\" = blkPerGame,\n#                \"TOV\" = tovPerGame,\n#                \"PF\" = pfPerGame,\n#                \"PTS\" = ptsPerGame) |&gt;\n#         select(-c(\"ORB\", \"DRB\")) |&gt;\n#         mutate(Age = as.integer(Age),\n#                G = as.integer(G),\n#                GS = as.integer(GS))\n#     })\n#   \n#   output$shot_metrics &lt;-\n#     DT::renderDataTable(\n#       metrics(),\n#       options = list(\n#         scrollX = TRUE,\n#         searching = FALSE,\n#         paging = FALSE),\n#       rownames = FALSE\n#     )\n#   \n#   output$zone_type &lt;-\n#     DT::renderDataTable(\n#       zone(),\n#       options = list(\n#         scrollX = TRUE,\n#         searching = FALSE,\n#         paging = FALSE\n#       ),\n#       rownames = FALSE,\n#       caption = \"Minimum 10 Shots Attempted\"\n#     )\n# }\n# \n# shinyApp(ui, server)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DataVizBlog",
    "section": "",
    "text": "NBA Analysis Final Project\n\n\n\n\n\n\n\nsports\n\n\ncode\n\n\nanalysis\n\n\nweb scraping\n\n\nlogistic regression\n\n\n\n\n\n\n\n\n\n\n\nMay 1, 2024\n\n\nEric Seltzer\n\n\n\n\n\n\n  \n\n\n\n\nPredicting if a NBA Team Will Make the Playoffs\n\n\n\n\n\n\n\nsports\n\n\ncode\n\n\nanalysis\n\n\ndata wrangling\n\n\n\n\n\n\n\n\n\n\n\nMar 6, 2024\n\n\nEric Seltzer\n\n\n\n\n\n\n  \n\n\n\n\nIs There Bias Towards the Big 6?\n\n\n\n\n\n\n\nsports\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nFeb 21, 2024\n\n\nEric Seltzer\n\n\n\n\n\n\n  \n\n\n\n\nFinding Indicators for Stock Prices\n\n\n\n\n\n\n\nfinance\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nFeb 9, 2024\n\n\nEric Seltzer\n\n\n\n\n\n\nNo matching items"
  }
]