{
  "hash": "9e4639df991c06b198842b1bb0e3ffb0",
  "result": {
    "markdown": "---\ntitle: \"NBA Analysis Final Project\"\nauthor: \"Eric Seltzer\"\ndate: \"2024-05-01\"\ncategories: [sports, code, analysis, web scraping, logistic regression]\n---\n\n# Introduction\nIn this final project, I set out to create a shiny app that allows you to quickly look at an NBA player's statistics for a given season, see a breakdown of their shooting, and a model that predicts the probability of them making a shot based on the distance they take it from. There is no data set for this project, but it is done using an API package called nbastatR. According to the documentation, this is described as, \"An interface for professional basketball data in R. Data sources include, but are not limited to: NBA Stats API, Basketball Insiders, Basketball-Reference, HoopsHype, and RealGM. Overtime additional data sources will be added.\"\n\nWhen you use the API package it does create data frames. The one I used for this project is done using the teams_shots() function. Below is an example of what is in the data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# These are all the packages that I used, the main one being nbastatR\nlibrary(shiny)\nlibrary(nbastatR)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(extrafont)\nlibrary(cowplot)\nlibrary(shinyWidgets)\nlibrary(broom)\nlibrary(modelr)\nlibrary(DT)\nlibrary(knitr)\nSys.setenv(VROOM_CONNECTION_SIZE=500000)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nbastatR)\nteams <-\n  nba_teams() |>\n  filter(isNonNBATeam == 0) |>\n  filter(!is.na(colorsTeam))\n\nteams <-\n  teams_shots(teams = \"Golden State Warriors\",\n              seasons = 2024)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGolden State Warriors 2023-24 shot data\n```\n:::\n\n```{.r .cell-code}\nteams <-\n  teams |>\n  filter(namePlayer == \"Stephen Curry\")\n\nplayer <-\n  teams |>\n  mutate(isShotMade = as.numeric(isShotMade))\nkable(head(player))\n```\n\n::: {.cell-output-display}\n| yearSeason|slugSeason |     idTeam| idPlayer|typeGrid          |namePlayer    |nameTeam              |typeEvent   |typeAction                |typeShot       |dateGame |slugTeamHome |slugTeamAway |   idGame| idEvent| numberPeriod| minutesRemaining|zoneBasic             |nameZone          |slugZone |zoneRange       | locationX| locationY| secondsRemaining| distanceShot|isShotAttempted | isShotMade|\n|----------:|:----------|----------:|--------:|:-----------------|:-------------|:---------------------|:-----------|:-------------------------|:--------------|:--------|:------------|:------------|--------:|-------:|------------:|----------------:|:---------------------|:-----------------|:--------|:---------------|---------:|---------:|----------------:|------------:|:---------------|----------:|\n|       2024|2023-24    | 1610612744|   201939|Shot Chart Detail |Stephen Curry |Golden State Warriors |Missed Shot |Running Pull-Up Jump Shot |3PT Field Goal |20231103 |OKC          |GSW          | 22300005|      40|            1|                8|Above the Break 3     |Left Side Center  |LC       |24+ ft.         |      -188|       153|               17|           24|TRUE            |          0|\n|       2024|2023-24    | 1610612744|   201939|Shot Chart Detail |Stephen Curry |Golden State Warriors |Made Shot   |Jump Shot                 |3PT Field Goal |20231103 |OKC          |GSW          | 22300005|      53|            1|                7|Above the Break 3     |Right Side Center |RC       |24+ ft.         |       145|       243|                0|           28|TRUE            |          1|\n|       2024|2023-24    | 1610612744|   201939|Shot Chart Detail |Stephen Curry |Golden State Warriors |Made Shot   |Running Pull-Up Jump Shot |3PT Field Goal |20231103 |OKC          |GSW          | 22300005|     249|            2|                6|Above the Break 3     |Center            |C        |24+ ft.         |        50|       272|               15|           27|TRUE            |          1|\n|       2024|2023-24    | 1610612744|   201939|Shot Chart Detail |Stephen Curry |Golden State Warriors |Missed Shot |Driving Layup Shot        |2PT Field Goal |20231103 |OKC          |GSW          | 22300005|     281|            2|                3|In The Paint (Non-RA) |Center            |C        |Less Than 8 ft. |       -45|         0|               23|            4|TRUE            |          0|\n|       2024|2023-24    | 1610612744|   201939|Shot Chart Detail |Stephen Curry |Golden State Warriors |Made Shot   |Step Back Jump shot       |3PT Field Goal |20231103 |OKC          |GSW          | 22300005|     292|            2|                2|Right Corner 3        |Right Side        |R        |24+ ft.         |       230|        83|               29|           24|TRUE            |          1|\n|       2024|2023-24    | 1610612744|   201939|Shot Chart Detail |Stephen Curry |Golden State Warriors |Missed Shot |Jump Shot                 |3PT Field Goal |20231103 |OKC          |GSW          | 22300005|     305|            2|                1|Above the Break 3     |Center            |C        |24+ ft.         |       -43|       253|               43|           25|TRUE            |          0|\n:::\n:::\n\n\n# Shot Chart\nFrom here, I had most of what I needed. But next I needed to make a short chart from which I got inspiration from a youtube tutorial. Below is the code to create the court, and add the makes and misses in.\n\n::: {.cell}\n\n```{.r .cell-code}\ncircle_points = function(center = c(0, 0),\n                         radius = 1,\n                         npoints = 360) {\n  angles = seq(0, 2 * pi, length.out = npoints)\n  return(data_frame(\n    x = center[1] + radius * cos(angles),\n    y = center[2] + radius * sin(angles)\n  ))\n}\n\n# Court Dimensions & lines\nwidth = 50\nheight = 94 / 2\nkey_height = 19\ninner_key_width = 12\nouter_key_width = 16\nbackboard_width = 6\nbackboard_offset = 4\nneck_length = 0.5\nhoop_radius = 0.75\nhoop_center_y = backboard_offset + neck_length + hoop_radius\nthree_point_radius = 23.75\nthree_point_side_radius = 22\nthree_point_side_height = 14\n\n# Court themes\ncourt_themes = list(\n  light = list(\n    court = 'ivory',\n    lines = '#999999',\n    text = '#222222',\n    made = '#00bfc4',\n    missed = '#f8766d',\n    hex_border_size = 1,\n    hex_border_color = \"ivory\"\n  ),\n  dark = list(\n    court = '#000004',\n    lines = '#999999',\n    text = '#f0f0f0',\n    made = '#00bfc4',\n    missed = '#f8766d',\n    hex_border_size = 0,\n    hex_border_color = \"#000000\"\n  ),\n  ppt = list(\n    court = 'gray20',\n    lines = 'white',\n    text = '#f0f0f0',\n    made = '#00bfc4',\n    missed = '#f8766d',\n    hex_border_size = 0,\n    hex_border_color = \"gray20\"\n  )\n)\n\n# Function to create court based on given dimensions\nplot_court = function(court_theme = court_themes$light,\n                      use_short_three = FALSE) {\n  if (use_short_three) {\n    three_point_radius = 22\n    three_point_side_height = 0\n  }\n  \n  court_points = data_frame(\n    x = c(width / 2, width / 2,-width / 2,-width / 2, width / 2),\n    y = c(height, 0, 0, height, height),\n    desc = \"perimeter\"\n  )\n  \n  court_points = bind_rows(court_points , data_frame(\n    x = c(\n      outer_key_width / 2,\n      outer_key_width / 2,\n      -outer_key_width / 2,\n      -outer_key_width / 2\n    ),\n    y = c(0, key_height, key_height, 0),\n    desc = \"outer_key\"\n  ))\n  \n  court_points = bind_rows(court_points , data_frame(\n    x = c(-backboard_width / 2, backboard_width / 2),\n    y = c(backboard_offset, backboard_offset),\n    desc = \"backboard\"\n  ))\n  \n  court_points = bind_rows(court_points , data_frame(\n    x = c(0, 0),\n    y = c(backboard_offset, backboard_offset + neck_length),\n    desc = \"neck\"\n  ))\n  \n  foul_circle = circle_points(center = c(0, key_height), radius = inner_key_width / 2)\n  \n  foul_circle_top = filter(foul_circle, y > key_height) %>%\n    mutate(desc = \"foul_circle_top\")\n  \n  foul_circle_bottom = filter(foul_circle, y < key_height) %>%\n    mutate(\n      angle = atan((y - key_height) / x) * 180 / pi,\n      angle_group = floor((angle - 5.625) / 11.25),\n      desc = paste0(\"foul_circle_bottom_\", angle_group)\n    ) %>%\n    filter(angle_group %% 2 == 0) %>%\n    select(x, y, desc)\n  \n  hoop = circle_points(center = c(0, hoop_center_y), radius = hoop_radius) %>%\n    mutate(desc = \"hoop\")\n  \n  restricted = circle_points(center = c(0, hoop_center_y), radius = 4) %>%\n    filter(y >= hoop_center_y) %>%\n    mutate(desc = \"restricted\")\n  \n  three_point_circle = circle_points(center = c(0, hoop_center_y), radius = three_point_radius) %>%\n    filter(y >= three_point_side_height, y >= hoop_center_y)\n  \n  three_point_line = data_frame(\n    x = c(\n      three_point_side_radius,\n      three_point_side_radius,\n      three_point_circle$x,\n      -three_point_side_radius,\n      -three_point_side_radius\n    ),\n    y = c(\n      0,\n      three_point_side_height,\n      three_point_circle$y,\n      three_point_side_height,\n      0\n    ),\n    desc = \"three_point_line\"\n  )\n  \n  court_points = bind_rows(\n    court_points,\n    foul_circle_top,\n    foul_circle_bottom,\n    hoop,\n    restricted,\n    three_point_line\n  )\n  \n  court_points <- court_points\n  \n  # Final plot creation\n  ggplot() +\n    geom_path(data = court_points,\n              aes(x = x, y = y, group = desc),\n              color = court_theme$lines) +\n    coord_fixed(ylim = c(0, 45), xlim = c(-25, 25)) +\n    theme_minimal(base_size = 22) +\n    theme(\n      text = element_text(color = court_theme$text),\n      plot.background = element_rect(fill = 'ivory', color = 'black'),\n      panel.background = element_rect(fill = court_theme$court, color = court_theme$court),\n      panel.grid = element_blank(),\n      panel.border = element_blank(),\n      axis.text = element_blank(),\n      axis.title = element_blank(),\n      axis.ticks = element_blank(),\n      legend.background = element_rect(fill = court_theme$court, color = court_theme$court),\n      legend.margin = margin(-1, 0, 0, 0, unit = \"lines\"),\n      legend.position = \"bottom\",\n      legend.key = element_blank(),\n      legend.text = element_text(size = rel(1.0))\n    )\n}\nteams <-\n  teams |>\n  mutate(x = as.numeric(as.character(locationX)) / 10,\n         y = as.numeric(as.character(locationY)) / 10 + hoop_center_y)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <-\n  plot_court(court_themes$light,\n             use_short_three = T) +\n  geom_point(\n    data = teams,\n    aes(\n      x = x,\n      y = y,\n      color = isShotMade,\n      fill = isShotMade\n    ),\n    size = 3,\n    shape = 21,\n    stroke = .5\n  ) +\n  scale_color_manual(\n    values = c(\"green4\", \"red3\"),\n    aesthetics = \"color\",\n    labels = c(\"Made\", \"Missed\")\n  ) +\n  scale_fill_manual(\n    values = c(\"green2\", \"gray20\"),\n    aesthetics = \"fill\",\n    labels = c(\"Made\", \"Missed\")\n  ) +\n  scale_x_continuous(limits = c(-27.5, 27.5)) +\n  scale_y_continuous(limits = c(0, 45)) +\n  theme(\n    plot.title = element_text(\n      hjust = .5,\n      size = 22,\n      family = \"Times New Roman\",\n      face = \"bold\",\n      vjust = -4\n    ),\n    plot.subtitle = element_text(\n      hjust = .5,\n      size = 10,\n      family = \"Times New Roman\",\n      face = \"bold\",\n      vjust = -8\n    ),\n    legend.position = c(.5, .98),\n    legend.direction = \"horizontal\",\n    legend.title = element_blank(),\n    legend.text = element_text(\n      hjust = .5,\n      size = 10,\n      family = \"Times New Roman\",\n      face = \"bold\",\n      colour = \"black\"\n    ),\n    plot.caption = element_text(\n      hjust = .5,\n      size = 6,\n      family = \"Times New Roman\",\n      face = \"bold\",\n      colour = \"lightgrey\",\n      vjust = 8\n    )\n  ) +\n  labs(title = \"Stephen Curry Shot Chart\")\n\nggdraw(p1) + theme(plot.background = element_rect(fill = \"ivory\", color = NA))\n```\n\n::: {.cell-output-display}\n![](blog-post-4_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n# Logistic Regression Model\nNext, I chose to make a logistic regression model to predict the probability of a shot going in dependent on the distance it is being taken from. Below is the code for the model and for the visual of the results.\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- glm(isShotMade ~ distanceShot,\n           data = player,\n           family = \"binomial\")\n\ngrid <-\n  data_grid(player,\n            distanceShot = seq_range(distanceShot, n = 1000))\n\naug <-\n  augment(mod,\n          newdata = grid,\n          se_fit = TRUE)\n\naug <-\n  aug |>\n  mutate(.predprob = (exp(.fitted) / (1 + exp(.fitted)))) |>\n  mutate(min = .predprob - .se.fit,\n         max = .predprob + .se.fit)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmade <-\n  player |>\n  filter(isShotMade == 1)\n\nmissed <-\n  player |>\n  filter(isShotMade == 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(aug,\n       aes(x = distanceShot,\n           y = .predprob)) +\n  geom_line(linewidth = 1.2,\n            colour = \"blue\") +\n  geom_rug(data = made,\n           sides = \"t\",\n           alpha = 0.3,\n           aes(y = isShotMade)) +\n  geom_rug(data = missed,\n           sides = \"b\",\n           alpha = 0.3,\n           aes(y = isShotMade)) +\n  geom_ribbon(aes(ymin = min,\n                  ymax = max),\n              fill = \"blue\",\n              alpha = 0.2) +\n  scale_x_continuous(breaks = seq(0, 70, 20)) +\n  theme_minimal() +\n  labs(x = \"Shot Distance\",\n       y = \"Predicted Probability\",\n       title = \"Stephen Curry Shot Make Probability Model\") +\n  theme(\n    panel.background = element_rect(fill = \"ivory\"),\n    plot.background = element_rect(fill = \"ivory\"),\n    plot.title = element_text(family = \"Times New Roman\")\n  )\n```\n\n::: {.cell-output-display}\n![](blog-post-4_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n# Shiny App\nNow that I had static versions of the visualizations I wanted, I wanted to add the ability for a user to interact. To do this, I used a shiny app with lots of interactivity. This would allow the user to pick a season that they wanted to look at as well as a player. This shiny app also uses some of the other functions in the nbastatR package so we can also look at their season averages for the selected season. Below is all the code used to add this functionality to the shiny app, as well as a link to the shiny app itself.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# teams <-\n#   nba_teams() |>\n#   filter(isNonNBATeam == 0) |>\n#   filter(!is.na(colorsTeam)) |>\n#   mutate(nameTeam = factor(nameTeam)) |>\n#   pull(nameTeam) |>\n#   levels()\n# \n# ui <- fluidPage(\n#   theme = bslib::bs_theme(bootswatch = \"sandstone\"),\n#   setBackgroundColor(\n#     color = \"ivory\",\n#     gradient = c(\"linear\", \"radial\")\n#   ),\n#   sidebarLayout(\n#     sidebarPanel(\n#       sliderInput(\n#         \"season\",\n#         \"Choose a Season (2024 -> 23-24)\",\n#         min = 2000,\n#         max = 2024,\n#         value = 2024,\n#         sep = \"\"\n#       ),\n#       selectInput(\"team_choices\",\n#                   \"Choose a NBA Team\",\n#                   choices = teams),\n#       selectInput(\"player\",\n#                   \"Choose a Player\",\n#                   choices = NULL),\n#       actionButton(\"button\",\n#                    \"Update\")\n#     ),\n#     mainPanel(\n#       tabsetPanel(\n#         tabPanel(\n#           \"Shot Chart and Stats\",\n#           plotOutput(\"player_plot\"),\n#           DT::dataTableOutput(\"shot_metrics\"),\n#           DT::dataTableOutput(\"zone_type\"),\n#         ),\n#         tabPanel(\"Shot Probability\",\n#                  plotOutput(\"log_model\")\n#         )\n#       )\n#     )\n#   ),\n# )\n# \n# server <- function(input, output, session) {\n#   team_react <-\n#     reactive({\n#       teams_shots(teams = input$team_choices,\n#                   seasons = input$season)\n#     })\n#   \n#   observeEvent(input$team_choices, {\n#     player_choices <-\n#       team_react() |>\n#       filter(nameTeam == input$team_choices) |>\n#       mutate(namePlayer = factor(namePlayer)) |>\n#       pull(namePlayer) |>\n#       levels()\n#     \n#     updateSelectInput(inputId = \"player\",\n#                       choices = player_choices)\n#   })\n#   \n#   observeEvent(input$season, {\n#     player_choices <-\n#       team_react() |>\n#       filter(nameTeam == input$team_choices) |>\n#       mutate(namePlayer = factor(namePlayer)) |>\n#       pull(namePlayer) |>\n#       levels()\n#     \n#     updateSelectInput(inputId = \"player\",\n#                       choices = player_choices)\n#   })\n#   \n#   player_react <-\n#     eventReactive(input$button, {\n#       team_react() |>\n#         filter(namePlayer == input$player) |>\n#         mutate(\n#           x = as.numeric(as.character(locationX)) / 10,\n#           y = as.numeric(as.character(locationY)) / 10 + hoop_center_y\n#         )\n#     })\n#   \n#   model_react <-\n#     eventReactive(input$button, {\n#       team_react() |>\n#         filter(namePlayer == input$player)\n#     })\n#   \n#   model <-\n#     reactive({\n#       mod <- glm(isShotMade ~ distanceShot,\n#           data = model_react(),\n#           family = \"binomial\")\n#       \n#       grid <-\n#         data_grid(model_react(),\n#                   distanceShot = seq_range(distanceShot, n = 1000)\n#         )\n#       \n#       aug <-\n#         augment(mod,\n#                 newdata = grid,\n#                 se_fit = TRUE)\n#       \n#       aug <-\n#         aug |>\n#         mutate(.predprob = (exp(.fitted) / (1 + exp(.fitted)))) |>\n#         mutate(min = .predprob - .se.fit,\n#                max = .predprob + .se.fit)\n#         \n#     })\n#   \n#   output$player_plot <-\n#     renderPlot({\n#       \n#       p1 <-\n#         plot_court(court_themes$light,\n#                    use_short_three = T) +\n#         geom_point(\n#           data = player_react(),\n#           aes(\n#             x = x,\n#             y = y,\n#             color = player_react()$isShotMade,\n#             fill = player_react()$isShotMade\n#           ),\n#           size = 3,\n#           shape = 21,\n#           stroke = .5\n#         ) +\n#         scale_color_manual(\n#           values = c(\"green4\", \"red3\"),\n#           aesthetics = \"color\",\n#           labels = c(\"Made\", \"Missed\")\n#         ) +\n#         scale_fill_manual(\n#           values = c(\"green2\", \"gray20\"),\n#           aesthetics = \"fill\",\n#           labels = c(\"Made\", \"Missed\")\n#         ) +\n#         scale_x_continuous(limits = c(-27.5, 27.5)) +\n#         scale_y_continuous(limits = c(0, 45)) +\n#         theme(\n#           plot.title = element_text(\n#             hjust = .5,\n#             size = 22,\n#             family = \"Times New Roman\",\n#             face = \"bold\",\n#             vjust = -4\n#           ),\n#           plot.subtitle = element_text(\n#             hjust = .5,\n#             size = 10,\n#             family = \"Times New Roman\",\n#             face = \"bold\",\n#             vjust = -8\n#           ),\n#           legend.position = c(.5, .98),\n#           legend.direction = \"horizontal\",\n#           legend.title = element_blank(),\n#           legend.text = element_text(\n#             hjust = .5,\n#             size = 10,\n#             family = \"Times New Roman\",\n#             face = \"bold\",\n#             colour = \"black\"\n#           ),\n#           plot.caption = element_text(\n#             hjust = .5,\n#             size = 6,\n#             family = \"Times New Roman\",\n#             face = \"bold\",\n#             colour = \"lightgrey\",\n#             vjust = 8\n#           )\n#         ) +\n#         labs(title = glue::glue(input$player, \" Shot Chart\"))\n#       \n#       ggdraw(p1) + theme(plot.background = element_rect(fill = \"ivory\", color = NA))\n#     })\n# \n#   output$log_model <-\n#     renderPlot({\n#       \n#       made <-\n#         player_react() |>\n#         filter(isShotMade == 1)\n#       \n#       missed <-\n#         player_react() |>\n#         filter(isShotMade == 0)\n# \n#       ggplot(model(),\n#              aes(x = distanceShot,\n#                  y = .predprob)) +\n#         geom_line(linewidth = 1.2,\n#                   colour = \"blue\") +\n#         geom_rug(data = made,\n#                  sides = \"t\",\n#                  alpha = 0.75,\n#                  aes(y = as.numeric(isShotMade))) +\n#         geom_rug(data = missed,\n#                  sides = \"b\",\n#                  alpha = 0.75,\n#                  aes(y = as.numeric(isShotMade))) +\n#         geom_ribbon(aes(ymin = min,\n#                         ymax = max),\n#                     fill = \"blue\",\n#                     alpha = 0.2) +\n#         theme_minimal() +\n#         scale_x_continuous(breaks = seq(0, 70, 10)) +\n#         labs(x = \"Shot Distance\",\n#              y = \"Predicted Probability\",\n#              title = glue::glue(input$player, \" Shot Make Probability Model\")) +\n#         theme(\n#           panel.background = element_rect(fill = \"ivory\"),\n#           plot.background = element_rect(fill = \"ivory\"),\n#           plot.title = element_text(family = \"Times New Roman\")\n#         )\n#     })\n#   \n#   zone <-\n#     eventReactive(input$button, {\n#       player_react() |>\n#         group_by(zoneRange) |>\n#         summarise(`Percent of Shots Made` = round(mean(isShotMade), 2),\n#                   `Number of Shots Attempted` = n()) |>\n#         filter(`Number of Shots Attempted` >= 10) |>\n#         arrange(desc(`Percent of Shots Made`)) |>\n#         rename(\"Distance\" = zoneRange)\n#     })\n#   \n#   metrics <-\n#     eventReactive(input$button, {\n#       metrics <- bref_players_stats(seasons = input$season,\n#                                     tables = \"per_game\") |>\n#         filter(namePlayer == input$player) |>\n#         select(\n#           -c(\n#             \"slugSeason\",\n#             \"groupPosition\",\n#             \"yearSeason\",\n#             \"isSeasonCurrent\",\n#             \"slugPlayerSeason\",\n#             \"slugPlayerBREF\",\n#             \"isHOFPlayer\",\n#             \"slugTeamsBREF\",\n#             \"pctFG2\",\n#             \"fg2mPerGame\",\n#             \"fg2aPerGame\",\n#             \"idPlayerNBA\",\n#             \"urlPlayerThumbnail\",\n#             \"urlPlayerHeadshot\",\n#             \"urlPlayerPhoto\",\n#             \"urlPlayerStats\",\n#             \"urlPlayerActionPhoto\",\n#             \"countTeamsPlayerSeasonPerGame\",\n#             \"urlPlayerBREF\"\n#           )\n#         ) |>\n#         rename(\"Name\" = namePlayer,\n#                \"Position\" = slugPosition,\n#                \"Age\" = agePlayer,\n#                \"Team\" = slugTeamBREF,\n#                \"G\" = countGames,\n#                \"GS\" = countGamesStarted,\n#                \"FG%\"= pctFG,\n#                \"3P%\" = pctFG3,\n#                \"eFG%\" = pctEFG,\n#                \"FT%\" = pctFT,\n#                \"MP\" = minutesPerGame,\n#                \"FGM\" = fgmPerGame,\n#                \"FGA\" = fgaPerGame,\n#                \"3P\" = fg3mPerGame,\n#                \"3PA\" = fg3aPerGame,\n#                \"FT\" = ftmPerGame,\n#                \"FTA\" = ftaPerGame,\n#                \"ORB\" = orbPerGame,\n#                \"DRB\" = drbPerGame,\n#                \"TRB\" = trbPerGame,\n#                \"AST\" = astPerGame,\n#                \"STL\" = stlPerGame,\n#                \"BLK\" = blkPerGame,\n#                \"TOV\" = tovPerGame,\n#                \"PF\" = pfPerGame,\n#                \"PTS\" = ptsPerGame) |>\n#         select(-c(\"ORB\", \"DRB\")) |>\n#         mutate(Age = as.integer(Age),\n#                G = as.integer(G),\n#                GS = as.integer(GS))\n#     })\n#   \n#   output$shot_metrics <-\n#     DT::renderDataTable(\n#       metrics(),\n#       options = list(\n#         scrollX = TRUE,\n#         searching = FALSE,\n#         paging = FALSE),\n#       rownames = FALSE\n#     )\n#   \n#   output$zone_type <-\n#     DT::renderDataTable(\n#       zone(),\n#       options = list(\n#         scrollX = TRUE,\n#         searching = FALSE,\n#         paging = FALSE\n#       ),\n#       rownames = FALSE,\n#       caption = \"Minimum 10 Shots Attempted\"\n#     )\n# }\n# \n# shinyApp(ui, server)\n```\n:::\n",
    "supporting": [
      "blog-post-4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}